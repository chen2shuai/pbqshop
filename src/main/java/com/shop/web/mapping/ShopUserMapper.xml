<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.shop.web.dao.ShopUserMapper" >
  <resultMap id="BaseResultMap" type="com.shop.web.entity.ShopUser" >
    <id column="userid" property="userid" jdbcType="INTEGER" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="usertype" property="usertype" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="BIGINT" />
  </resultMap>
  
  <sql id="Base_Column_List" >
    userid, username, password, usertype, create_time
  </sql>
  
  <!-- 分页查询 -->
  
  <select id="queryWithPage" resultMap="BaseResultMap">
  	select
  		<include refid="Base_Column_List"></include>
  	from shop_user
  		<trim prefix=" where ">
  			<if test="userid != null">
  				and userid = #{userid,jdbcType=INTEGER}
  			</if>
  			<if test="username != null">
  				and username = #{username,jdbcType=VARCHAR}
  			</if>
  		</trim>
  	order by userid limit #{page,jdbcType=INTEGER},#{rows,jdbcType=INTEGER}
  </select>
  
  <!-- 通过id查询数据 -->
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from shop_user
    where userid = #{userid,jdbcType=INTEGER}
  </select>
  
   <!-- 通过name查询数据 -->
  <select id="selectByName" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from shop_user
    where username = #{username,jdbcType=VARCHAR}
  </select>
  
  <!-- 删除数据 -->
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from shop_user
    where userid = #{userid,jdbcType=INTEGER}
  </delete>
  
  <!-- 新增 -->
  <insert id="insert" parameterType="com.shop.web.entity.ShopUser" >
    insert into shop_user (userid, username, password, 
      usertype, create_time)
    values (#{userid,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{usertype,jdbcType=INTEGER}, #{createTime,jdbcType=BIGINT})
  </insert>
  
  <!--  -->
  <insert id="insertSelective" parameterType="com.shop.web.entity.ShopUser" >
    insert into shop_user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userid != null" >
        userid,
      </if>
      <if test="username != null" >
        username,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="usertype != null" >
        usertype,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="userid != null" >
        #{userid,jdbcType=INTEGER},
      </if>
      <if test="username != null" >
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="usertype != null" >
        #{usertype,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  
  <update id="updateByPrimaryKeySelective" parameterType="com.shop.web.entity.ShopUser" >
    update shop_user
    <set >
      <if test="username != null" >
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="usertype != null" >
        usertype = #{usertype,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=BIGINT},
      </if>
    </set>
    where userid = #{userid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.shop.web.entity.ShopUser" >
    update shop_user
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      usertype = #{usertype,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=BIGINT}
    where userid = #{userid,jdbcType=INTEGER}
  </update>
</mapper>